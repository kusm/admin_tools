#!/usr/bin/ruby -Ku
# -*- coding: utf-8; -*-

require 'optparse'

require './manageuser.rb'
ManageUser.need_root_or_exit if not $DEBUG
ManageUser.setup_connection

class Password
  include ManageUser

  PASSWORD_LENGTH = 10

  def initialize
    @user = nil
    @password = nil
    @hashed_password = nil
    @opts = OptionParser.new
    initialize_flags
    initialize_parser
  end

  def initialize_parser
    @opts.on('-p', '--password=PASSWORD', "set a new password [DEPRECATED]") do |password|
      info 'hoge'
      warning <<EOWarning
A new password is given. Note that a new password will
be generated automatically unless given explicitly.
EOWarning
      set_password password
    end
    @opts.on('-n', '--noop', TrueClass, "do nothing") do
      enable_mode :noop
    end
    @opts.on('-v', '--[no-]verbose', TrueClass, "increase verbosity") do |verbose|
      set_mode :verbose, verbose
    end
    @opts.on('-t', '--[no-]test', TrueClass, "NOT IMPLEMENTED") do |test|
      set_mode :test, test
    end
    @opts.on_tail('-h', '--help', TrueClass, "show a help message") do
      enable_mode :help
    end
  end
  private :initialize_parser

  def parse_options!(argv)
    @opts.order!(argv)
    if (!argv.empty?) then
      # Try to treat an unknown option as a UID
      uid = argv.shift
    end
    @opts.order!(argv)
    show_help_exit unless uid
    set_uid uid
  end

  def set_uid(uid)
    error "The user #{uid} does NOT exist!" unless User.exist?(uid)
    @user = User.find uid
    info "Set user as #{uid}."
  end

  def set_password(password)
    return if @password
    @password = password
    @hashed_password = calculate_hashed_password password
    info "Set password as #{@password}."
  end

  def main
    show_help_exit if is_mode? :help
    set_password generate_random_password(PASSWORD_LENGTH)
    modify_user
    create_password_pdf
  end

  def modify_user
    @user.user_password = @hashed_password
    if is_mode? :noop then
      info "Skipped a process of LDAP entry modification."
      return
    end
    unless @user.save then
      warning @user.errors.full_messages.join ' '
      error "Failed to modify the LDAP user #{@user.dn}!"
    end
    info "Modified the LDAP user #{@user.dn}."
    info @user.to_s
  end

  def show_help_exit
    usage = @opts.to_s.gsub('[options]', '[options] UID')
    prog = @opts.program_name
    puts <<EOHelp
The passwd script modifies an LDAP user's password on the system.
If a new password is not given by the option, the new one is
automatically generated at random. After successfully modifying,
an outputted PDF file let the user know his/her new password.

#{usage}
Example:
    #{prog} uwabami
    #{prog} -v --noop --password=YUyuYUyu kuttinpa
EOHelp
    exit
  end

end

password = Password.new
password.parse_options!(ARGV)
password.main

