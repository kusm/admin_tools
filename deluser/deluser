#!/usr/bin/ruby -K

require 'optparse'
require 'active_ldap'
#require 'base64'

if not $DEBUG then
	if `id -u` != 0 then
		STDERR.puts "need root privilege!"
		exit 1
	end
end

class Deluser
	LDAPBASE = "dc=math,dc=kyoto-u,dc=ac,dc=jp"
	LDAPMANAGER = "cn=Manager,#{LDAPBASE}"
	LDAPOPTIONS = "-W -D #{LDAPMANAGER}"
	HELP = <<EOHelp
The deluser script removes LDAP user of the system.
It removes related data as shown below:
  [membership] LDAP attribute memberUid=UID,
  [   group  ] LDAP entry cn=UID,ou=Group,dc=...,
  [   user   ] LDAP entry uid=UID,ou=People,dc=...,
  [ home dir ] /home/UID/ (compressed as .tar.gz).

EOHelp

	def initialize
		@config = {}
		@opts = OptionParser.new
		@opts.on('-v', '--verbose', "increase verbosity") do
			@config[:verbose] = true
		end
		@opts.on('-n', '--noop', "do nothing") do
			@config[:noop] = true
		end
		@opts.on('-m', '--membership-only', "remove only memberships") do
			@config[:membershiponly] = true
		end
		@opts.on('-u', '--user-only', "remove only the user") do
			@config[:useronly] = true
		end
		@opts.on('-g', '--group-only', "remove only the group") do
			@config[:grouponly] = true
		end
		@opts.on('-d', '--homedir-only', "remove only the home directory") do
			@config[:homedironly] = true
		end
		@opts.on('-h', '--help', "show help message") do |group|
			@config[:help] = true
		end 
	end

	# Parse the UID: "./deluser UID ..."
	def parse_options!(argv)
		@opts.order!(argv)
		if (!argv.empty?) then
			# Try to treat unknown option as a UID.
			set_uid(argv.shift)
			# Continue parsing
			@opts.order!(argv)
		end
	end

	def main
		# --help
		if (@config[:help]) then
			show_help
			exit
		end
		if ($DEBUG) then
			puts @config
		end
	end

	def set_uid(uid)
		@config[:uid] = uid
	end

	def show_help
		puts HELP
		puts @opts.to_s.gsub(/deluser/, 'deluser UID')
	end
end

deluser = Deluser.new
deluser.parse_options!(ARGV)
deluser.main

