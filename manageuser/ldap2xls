#! /usr/bin/env ruby
# -*- coding: utf-8; -*-
require 'optparse'
require './manageuser.rb'
require 'spreadsheet'

ManageUser.need_root_or_exit unless $DEBUG
ManageUser.setup_connection

def displayname_to_hash(displayName)
  return {} unless displayName.is_a? Array
  result = {}
  displayName.each do |component|
    if component['lang-ja'].is_a? String
      result['lang-ja'] = component['lang-ja']
    end
    if component['lang-ja'].is_a? Hash
      result['lang-ja;phonetic'] = component['lang-ja']['phonetic']
    end
    if component['lang-en'].is_a? Hash
      result['lang-en;phonetic'] = component['lang-en']['phonetic']
    end
  end
  return result
end

def userinfo(uid)
  userinfo = Array.new
  user = ManageUser::User.find("#{uid}")
  userinfo.push user.cn
  displayName = displayname_to_hash(user.displayName)
  userinfo.push displayName['lang-en;phonetic'] || ''
  userinfo.push displayName['lang-ja'] || ''
  userinfo.push displayName['lang-ja;phonetic'] || ''
  userinfo.push user.gecos
  userinfo.push user.givenName
  userinfo.push user.sn
  userinfo.push "#{user.uid}@#{ManageUser::DOMAIN}"
  userinfo.push user.uid
  return userinfo
end

book = Spreadsheet::Workbook.new
GROUPS = {
  'kyoju' => '教授',
  'junkyoju' => '准教授',
  'koshi' => '講師',
  'jokyo' => '助教',
  'gakushin-pd' => '学振 PD',
  'tokuken' => '特定研究員',
  'fellow' => '研究員',
  'jimushitsu' => '事務室',
  'toshojimu' => '図書事務',
  'yomuin' => '用務員',
  'doctor' => '博士',
  'master' => '修士'
}
HEADERS = %w{
  DisplayName(Web:en) Phonetic(Web:en) DisplayName(Web:ja) Phonetic(Web:ja)
  FullName(DB) FirstName FamilyName Mail UserName
}

assigned_uid = []
GROUPS.each do |group_cn, group_name|
  sheet = book.create_worksheet :name => group_name
  sheet.row(0).concat HEADERS
  HEADERS.size.times do |i|
    sheet.column(i).width = 20
  end
  ManageUser::Group.find(group_cn).memberUID.each_with_index do |uid, i|
    sheet.row(i + 1).concat userinfo(uid)
    assigned_uid.push uid
  end
end
sheet = book.create_worksheet :name => "others"
sheet.row(0).concat HEADERS
HEADERS.size.times do |i|
  sheet.column(i).width = 20
end
ManageUser::User.find(:all, :filter => [:not, [:or, {:uid => assigned_uid} ]]).each_with_index do |user, i|
  unless user.uid == 'root'
    sheet.row(i + 1).concat userinfo(user.uid)
  end
end
book.write('meibo.xls')
