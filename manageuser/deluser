#!/usr/bin/ruby -Ku
# -*- coding: utf-8; -*-

require 'optparse'
require 'io/console'

require './manageuser.rb'
ManageUser.need_root_or_exit if not $DEBUG
ManageUser.setup_connection

class DelUser
  include ManageUser

  HELP = <<EOHelp
The deluser script removes LDAP user of the system.
First, it archives the user's home directory, if possible.
Next, it removes related data as shown below:
  [membership] LDAP attribute memberUid=UID,
  [   group  ] LDAP entry cn=UID,ou=Group,dc=...,
  [   user   ] LDAP entry uid=UID,ou=People,dc=....

EOHelp

  def initialize
    @opts = OptionParser.new
    initialize_flags
    enable_mode :archive_homedir
    enable_mode :remove_user
    enable_mode :remove_group
    enable_mode :remove_membership
    initialize_parser
  end

  def initialize_parser
    @opts.on('-m', '--[no-]membership', TrueClass, "remove memberships (default: true)") do |membership|
      set_mode :remove_membership, membership
    end
    @opts.on('-u', '--[no-]user', TrueClass, "remove the user (default: true)") do |user|
      set_mode :remove_user, user
    end
    @opts.on('-g', '--[no-]group', TrueClass, "remove the group (default: true)") do |group|
      set_mode :remove_group, group
    end
    @opts.on('-a', '--[no-]archive', TrueClass, "archive the home directory (default: true)") do |archive|
      set_mode :archive_homedir, archive
    end
    @opts.on('-n', '--noop', TrueClass, "do nothing") do
      enable_mode :noop
    end
    @opts.on('-v', '--[no-]verbose', TrueClass, "increase verbosity") do |verbose|
      set_mode :verbose, verbose
    end
    @opts.on('-t', '--[no-]test', TrueClass, "suppose the user is a test user") do |test|
      set_mode :test, test
    end
    @opts.on_tail('-h', '--help', TrueClass, "show a help message") do
      enable_mode :help
    end 
  end
  private :initialize_parser

  # Parse the UID: "./deluser UID ..."
  def parse_options!(argv)
    @opts.order!(argv)
    if (!argv.empty?) then
      # Try to treat unknown option as a UID.
      set_uid(argv.shift)
      # Continue parsing
      @opts.order!(argv)
    end
  end

  def main
    # --help
    if is_mode? :help then
      show_help
      exit
    end
    verify_user
    archive_homedir
    remove_memberships
    remove_primary_group
    remove_user
    expire
  end

  private

  def debug
    exit
  end

  def set_uid(uid)
    @uid = uid
  end

  def verify_user
    error "The user #{@uid} does NOT exist!" unless User.exist?(@uid)
    user = User.find(@uid)
    uid_number = user.uid_number
    gid_number = user.gid_number
    range = get_id_range
    mode_string = is_mode?(:test) ? 'test' : 'normal'
    if (range.include?(uid_number)) then
      info "The uidNumber #{uid_number} is in #{mode_string} user range #{range}."
    else
      warning "The uidNumber #{uid_number} is NOT in #{mode_string} user range #{range}."
    end
    if (range.include?(gid_number)) then
      info "The gidNumber #{gid_number} is in #{mode_string} user range #{range}."
    else
      warning "The gidNumber #{gid_number} is NOT in #{mode_string} user range #{range}."
    end
  end

  def archive_homedir
    return if is_mode? :noop
    return unless is_mode? :archive_homedir
    return unless (Dir.exists?("/home/#{@uid}"))
    tarfile = EXPIRED_DIR + "#{@uid}.tar"
    command = "#{TAR} cf #{tarfile} #{@uid}"
    pid = spawn(command, :chdir => "/home")
    Process.detach(pid)
    info "Started archiving the home directory"
    info "(pid #{pid})# #{command}"
  rescue Errno::ENOENT => tar_error
    error "Failed to execute tar!\n#{tar_error}"
  end

  def remove_user
    return if is_mode? :noop
    return unless is_mode? :remove_user
    return unless (User.exists?(@uid))
    User.destroy(@uid)
    info "Removed the user #{@uid}"
  end

  def remove_primary_group
    return if is_mode? :noop
    return unless is_mode? :remove_group
    return unless (User.exists?(@uid))
    return unless (Group.exists?(@uid))
    cn = User.find(@uid).primary_group.cn
    Group.destroy(cn)
    info "Removed the group #{cn}"
  end

  def remove_memberships
    return if is_mode? :noop
    return unless is_mode? :remove_membership
    return unless (User.exists?(@uid))
    User.find(@uid).groups.each &method(:remove_membership)
  end

  def remove_membership(group)
    memberUids = group.memberUid
    memberUids.delete(@uid)
    group.memberUid = memberUids # call setter in order to overwrite
    unless group.save
      warning group.errors.full_messages.join ' '
      error group.errors.full_message
    end
    info "Removed #{@uid} from #{group.cn}"
  end

  def expire
    return if is_mode? :noop
    return if is_mode? :test
    File.open(EXPIRED_LIST, 'a') do |f|
      f.puts(@uid)
    end
  end

  def show_help
    puts HELP
    puts @opts.to_s.gsub(/deluser/, 'deluser UID')
  end
end

deluser = DelUser.new
deluser.parse_options!(ARGV)
deluser.main

